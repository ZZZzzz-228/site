import asyncio
import logging
import os
import mysql.connector  # type: ignore
from aiogram import Bot, Dispatcher, types  # type: ignore
from aiogram.filters import Command  # type: ignore
from dotenv import load_dotenv  # type: ignore

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

DB_HOST = os.getenv("DB_HOST", "localhost")
DB_NAME = os.getenv("DB_NAME", "city_db")
DB_USER = os.getenv("DB_USER", "root")
DB_PASSWORD = os.getenv("DB_PASSWORD")
if not DB_PASSWORD:
    raise ValueError("‚ùå DB_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


def get_connection():
    try:
        return mysql.connector.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None


def create_subscribers_table():
    conn = get_connection()
    if conn is None:
        return
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            chat_id BIGINT NOT NULL,
            phone_number VARCHAR(100),
            username VARCHAR(255)
        )
    """)
    conn.commit()
    cursor.close()
    conn.close()


@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(
                    text="üëâüèªüì≤üëàüèª",
                    request_contact=True
                )
            ],
            [
                types.KeyboardButton(
                    text="‚ùå–û—Ç–ø–∏—Å–∫–∞‚ùå"
                )
            ]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâüèªüì≤üëàüèª, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüóûÔ∏è.",
        reply_markup=keyboard
    )


@dp.message(lambda msg: msg.contact is not None)
async def contact_handler(message: types.Message):
    phone = message.contact.phone_number
    chat_id = message.chat.id
    username = message.from_user.username or "unknown_user"

    conn = get_connection()
    if conn is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor = conn.cursor()
    cursor.execute("SELECT * FROM subscribers WHERE chat_id = %s", (chat_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO subscribers (chat_id, phone_number, username) VALUES (%s, %s, %s)",
            (chat_id, phone, username)
        )
        conn.commit()
        await message.answer("‚úÖ‚úÖ –û—Ç–ª–∏—á–Ω–æ!‚úÖ‚úÖ\n–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π üóûÔ∏è")
        await bot.send_message(
            chat_id,
            "üåê –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ localhost):\nhttp://localhost:8080\n\nüìå –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥—Ä–µ—Å!"
        )
        logging.info(f"ü•≥ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} | {phone} | chat_id: {chat_id}")
    else:
        await message.answer("üëª –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üëª.")

    cursor.close()
    conn.close()


@dp.message(lambda msg: msg.text.strip().lower() == "‚ùå–æ—Ç–ø–∏—Å–∫–∞‚ùå")
async def unsubscribe_handler(message: types.Message):
    chat_id = message.chat.id
    conn = get_connection()
    if conn is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor = conn.cursor()
    cursor.execute("DELETE FROM subscribers WHERE chat_id = %s", (chat_id,))
    conn.commit()
    cursor.close()
    conn.close()

    await message.answer("–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è üò¢ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëâüèªüì≤üëàüèª")
    logging.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: chat_id {chat_id}")


async def send_alert_to_subscribers(message_text: str):
    conn = get_connection()
    if conn is None:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM subscribers")
    subscribers = cursor.fetchall()
    for (chat_id,) in subscribers:
        try:
            await bot.send_message(chat_id, message_text)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    cursor.close()
    conn.close()


async def main():
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤‚Ä¶ ü§ñ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    create_subscribers_table()
    asyncio.run(main())
